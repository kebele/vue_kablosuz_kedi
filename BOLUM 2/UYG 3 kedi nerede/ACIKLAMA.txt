pogaca nerede oyunu

*klaör yapısı, componentleri belirleme
* kullanacağımız ekranlar, ana ekran, hata ekranı, tebrik ekranı

* burada duruma göre değişen componentler olacak, başarılı durumda tebrik, hata durumunda hata componenti kullanılacak, bunu <component></component> yapıyor, bunun için components klasörüne comp yapalım, ve componentlerimizi oluşturalım
    Card.vue, (kartların her biri)
    DefaultCard.vue (gizli olan card)
    GameCards.vue (seçenek kartları)
    Celebrate.vue (başarılı old.)
    Failure.vue (hata old.)

*componentlerimiz arasında geçişi ayarlayalım, ... ilk açılışta GameCards.vue çalışacak, gameCards.vue daki durumlara göre ekranlar şekillenecek

* GameCards.vue kartlar burada, tıklamalar, aksiyonlar burada, stiller, animasyonlar, mantıksal işlemlerin bir çoğu burada

* card a ilişkin kod ve style ı hazırladık, daha sonra bunu ayrı bir comp a taşıyacağız, şimdilik hepsini bir arada görmek, 

* card componentine taşımayı yapalım, template deki card ı ve style daki card ile ilgli olanları kesip Card.vue ya taşıdık, card.vue daki style scoped olacak, 

* DefaultCard.vue; import ile devam, DefaultCard.vue içide Card.vue ile aynı sadece burada img yi kaldırdık, sebebi burada kullnacağımız resmi css içine background-image ile koyduk, küçük ayarlamalar yaptık.

* kart bilgilerinin dinamik getirilmesi, GameCards.vue da data da tanımlamalara başlayalım, cards:[] tanımladık ve v-for u düzenledik, ancak Card.vue ya buradaki cards[] dan bilgileri yollamamız gerekiyor, bunun 2 yolu var, props ve slot, burada props olarak yollayalım, :card="card" olarak yollayacağımızı elementin içinde söyledik, şimdi Card.vue ya gidip bunu okumamız lazım, 
    GameCards.vue dan gönderme
        <app-card 
            v-for="card in cards" 
            :key="card.id" 
            :card="card"
            >
        </app-card>
    Card.vue da yakalama
        script te props : ["card"] olarak yakalayacağımızı söylüyoruz
        <img :src="card.image" alt />
    şeklinde kullanıyoruz, burada src yi bind ettik dikkat.
bu şekilde sıkıntısız şekilde bütün cardlar geldi.

* kart seçimi; GameCard.vue içindeki car d componentinin oluşturduğu artlara tıklıyoruz, seçilen kartı belirleyecek property i GameCard.vue içinde tutalıyız, içine gidip data içine selectedCard tanımlayacağız, buradali Card.vue ya adresli <app-card></app-card> ın tıklanabilir hale getireceğiz, burada önemli nokta html elemenlerini tıklanabilir hale getirmek içn @click kullanılırken, vue tarafından hazırlanmış olanlarda @click.native kullanmalıyız. Tıklanan kartın selectedCard değerini card.id ye atıyoruz. Çalışıp çalışmadığını kontrol için game areya üzerine bir p oluşturup içine selectedCard bilgisini koyalım, problem yok!

* şimdi kartı seçebiliyoruz buna biraz style verelim, styleı hazırladık, .shadow{}, app-card ın içine gidip; 
    <app-card 
        :class="{'shadow' : selectedCard == card.id}"
        @click.native="selectedCard = card.id"
        v-for="(card, index) in cards" 
        :key="index" 
        :card="card"
    ></app-card>
şeklinde düzenledik, :class ile selectedCard ile card.id eşitse shadow class ını ekle diyoruz

* cevap kartı; DefaultCard.vue, sayfa her yenilendiğinde bizim cards:[] dan bir tanesini seçip onu defaultCard yapmamız lazım,  bunun için life cycle lardan created kullanırız, 
    created(){
        let answer = Math.ceil(Math.random() * this.cards.length);
        //  console.log(answer)
        this.answer = this.cards[answer-1];
        console.log(this.answer)
    }
buradan bize bir objet dönecek, answer : {} ı data da boş bir nesneye eşitleyeceğiz, sayfa cretae old. random bir numara gelecek bu numarayı cards[] içinden bir kart çekeceğiz ve onu boş olan answer{} a atayacağız, 

* sayfa yenilendiğinde cardların dönmesi, kartlrı bir transition-group içine almamız lazım, bu gruba .card-container class ı verdik ve özellikleri container ile aynı olsun diye style da ilgili yere ekledik, daha sonra name="rotate-all" verdik ve style da rotate-all için düzenlemeye başladık, vue burada bizden 4 class için bilgi bekliyor, .rotate-all-enter, rotate-all-enter-active, .rotate-all-leave, .rotate-all-leave-active,
enter a bir şey yazmamızın sebebi animation kullanıdık ve ilk durumu @keframes de from da belirttik, leave i de kullanmamam sebbeimiz her hangibir card dom dan kaybolmayacak yine kalacak, bu yüzden çıkış animayonuna ihtiyaç yok, 

* defaultCard animasyonu ve seçili kartın bundan sonra gösterilmesi, 


* açık kart seçimi olmadan cevap gelmesin, şu anda seçim yapmadan da alttaki karta bastiğimizda dönüyor bunu engellemeliyiz, tıklamayı showCard() ile alıyoruz,  eğer selectedCard değeri null ise alert verip bir kart seç diyeceğiz yoksa yani bir kart seçildiyse bu sefer cevap doğru mu değil mi diye bakacağız doğru ise kartı gösterecek/tebrik ekranı gelecek yanlış ise yapacak yanlış ekranı gelecek diyeceğiz, tabi bu da else içinde bir if daha demek

* doğru-yanlış component geçişleri, showCard() daki alert lerde diğer componentlere geçiş yapacağız, oyunun kurgusu şöyleydi oyundaki ana componentler App.vue daydı, bunlar 
GameCards.vue, Celebrate.vue, Failure.vue oyun genel olarak GameCards.vue da çalışıyor, buna karar veren şey ise App.vue daki 
    <component 
        :is="activeComponent"
    ></component>
buradaki activeComponenti doğru/yanlış cevaba göre değiştirmeliyiz yani, bunu yapmak için iki yol var, 
ilk yol GameCards.vue içindeki alertlerin olduğu yerde event emit edeceğiz ve App.vue daki activeComponent değerini değiştirmek, bu şekilde yapalım. Diğer yol ise eventBus kullanmak,  burada pek gerek yok, çünkü buradaki iletişim basit sadece child to parent iletişim var
    App.vue da
        <component
            @isCorrectEvent = "activeComponent = $event"
            :is="activeComponent"
        ></component>
    GameCards.vue dan gelen 
        this.$emit("isCorrectEvent", "app-celebrate")
* Artık Failure.vue ve Celebrate.vue yu düzenleyelim, Failure.vue ile başlayalım, içine bilemediniz mesajı ve yeni oyunu başlatacak butonu koyalım, buton ve sayfa style ında önemli nokta scoped olmalı, onun dışında hoverda hem normal bölüme hemde hover a transition verirsek daha iyi bir görüntü olur.

* Celebrate.vue, Failure un hepsini kopyalayıp Celebrate durumu için düzenleyeceğiz, 

* yeni oyun butonlarının aktifleştirilmesi, bunun için App.vue daki activeComponent i değiştreceğiz, Celebrate.vue veya Failure.vue daki newGame(){} den ...
    newGame(){
            this.$emit("activeComponentEvent", "app-game-cards")
        }
yollayıp App.vue da 
    <component
    @activeComponentEvent = "activeComponent = $event"
    :is="activeComponent"
></component>
şeklinde yakalıyoruz, @isCorrectEevent i activeComponentEvent ile değiştirdik, 

* componentler arasında geçişe animasyon vermek, bu noktada animasyonu nerede vereceğimiz önemli, bu geçişe hangi component içinde yapılıyorsa animasyonda o component içinde verilmelidr, burada bu App.vue da yapıyor, o zaman bu geçiş yapılan <componet></componet> i <transition></transition> arasına aldığımızda buna animasyon verebilir hale getirmiş oluruz.
    <transition name="slideContainer" mode="out-in">
        <component
            @activeComponentEvent = "activeComponent = $event"
            :is="activeComponent"
        ></component>
    </transition>

* gerekli 4 classı (.slideContainer-enter{} ..... ) ekledikten sonra animasyon veya transition ikisinide yapabiliriz burada animasyon yapalım, ona göre düzenlemeleri yaparız, slide-in ve slide-out için @keyframes leri yapacağız, bir önemli durum enter ve leave isimli class lara ihtiyacımız yok, bunun sebebi animasyon @keyframes kullandığımız için animasyonun başlangıç noktasını belirlememiz gerekmiyor, from ve to da başlangıç ve bitişi belirliyoruz.  

* konfetileri yağdıralım, bilmemiz gereken bazı şeyler var, birincisi konfeti için gerekli olan dosyabir js dosyası o yüzden öncelikle index.html ye import etmemiz lazım, confetti.js yapacağı iiş bir canvas üzerinden yapıyor, bu canvası App.vue ya eklemeliyiz bu canvasın confetti de kullanıkın da kayaklana bir şey, canvası transition içindeki component ten ayrı olarak koyacağız ve id si canvas olacak(bunu confetti diretiyor) ayrıca bu durumda transition içinde birdebn fazla elemene tolduğu için transition çalışmayacağından bunu transition-group haline getireceğiz ve group olduğunda bu sefer içimndeki elemenşeterw ayrı key değeri veremiz gerekiyor bu key unique olmalı biz buırada component e key olarak mainComponent dedik, canvasa da key olarak canvas dedik, 

* bilmemiz gereken diğer konu, şu anda confetti index.html ye import edildiği için bütün sayfalarda çalışıyor yada daha doğru ifadesiyle bütün componentlerde çalışıytor, bizim ihtiyacımız doğru cevap geldiğinde confettiyi ekrana bas, yanlış geldiğinde de ekrandan gizle. Bunun için canvası App.vue da eklediğimiz yere bir koşul koyarız gelen değer celebrate olduğunda canvas görünsün yoksa görünmesin diyeceğiz, koşul derken v-if değil, vshow kullanacağız çünkü v-if in else i DOM dan ilgili nesneyi kaldırır, bu durumda vue canvas id li elementi arar, oysa v-show sadece o nesnenin display değerini değiştirir, nesneyi  DOM'dan kaldırmaz, 