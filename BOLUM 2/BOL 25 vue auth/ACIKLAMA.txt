vue auth işlemleri 

* iş planımız, router, strore, firebase, auth şeklinde

* route ile başlayalım, src > router.js oluşturalım, importlar; vue, vue-router, ve kullanacağımız componentleri import,

* Vue.use(VueRouter) kullanacağız diyoruz

* router tanımlamasını export ediyoruz,ne şekilde old. kodda... sonra main.js e gidip router ı import ediyoruz, ve new Vue içine ekleyip, bundan sonra global olarak kullanabileceğimizi belirtiyoruz, 

* App.vue da router a göre homepage, Auth, About  değişeceğ için burada router-view yapmamız lazım, değişimler orada olacak çünkü, components deki sayfalarıda silelim, çünkü bunları header üzerinden yönlendirmeliyiz, 

* Header.vue üzerinden navigasyon, buradaki li leri (anasayfa ve about) <router-link></router-link> e dönüştüreceğiz, log out u şimdilik yapmayacağız, auth işlemleri sırasında yapacağız, 

* Store yapımı, vuex i projeye dahil edelim, kaynak dosyada packages.json içinde vuex, axios vs görülüyor, yani kaynak dosyası ile beraber vuex projeye dahil edilmiş durumda, direkt store tanımlayalım, src içine store.js açalım, importlar vue, vuex, Vue.use(Vuex ) sonrasında const store = new Vuex.Store({
    state : {...},
    getters : {...}
    mutations : {...},
    actions : {...}
})

export default store 

standart store şablonu bundan

* state i belirleyelim,  state de ne tutacağız?, firebase e gideceğiz login vekay kayıt olacağız firebase bize bir token verecek, token lazım yani ilk planda, mutations setToken(state){...}, mutations da mutations ları set edelim, token düzenlemek için, state ve token ı parametre olarak kullanacak, state i ve token ı kullanarak state içindeki token ı arguman olarak gelen yeni token ile değiştirecek görevi bu, birde clearToken(state){...} bunun görevi ise state deki token ı temizlemek, 
actions içinde login olacak login iiçnde commit, dispatch ve state kullanacağız ve burada login a payload olarak authData isimli değişken gelecek bunun içinde login mi olmak istiyoruz yoksa kayıt mı olmak istiyoruz, bu iki veriyide taşıyacak yani, aynı şekilde logout olacak, getters içinde; çıkış yap butonu sadece bir giriş yaptığımızda ortaya çıkmalı, bunu Header.vue da çıkış yap içinde logoutClass var display ? none ile yapılacak, burada b'r auth islemi varsa bu görünecek yoksa ekrande görünmeyecek, bunu anlamak için token imiz var mı yok mu buna bakacağız, orada da bize getters yapacak bu işi, ayrıca store.js i main.js de tanımlamalıyız, burada dikkat çekici bir husus, main.js de router i { router } şeklinde import ettik store u ise normal neden ? , sebebi router da bir sabit export ettik, store da ise default olarak export ettik, fark için koda bak, şimdi bu yaptığımızı denemk içn kaynakllardan vue developer tool da tarayıcı da state yapısını görebiliriz, 

* firebase projesinin oluşturulması, yeni proje oluşturalım, peojenin API keyini kopyalayıp, state içine koyalım ve sonrasında firebase konsolda authentication a gidelim, oturum açma yöntemini ayarla, eposta/şifre yi etkinleştir dedikten sonra sadece üsttekini etkinleştiriyoruz, şifrsiz oturum açma kısnına dokunma, bununla ilgili firebase auth rest api konsuna ayrıca bak, şua nda seçtiğimiz özellik olan sign in sign up email/passwrod kısmı özellikle bizim şimdi kullanacağızmız kısım, 

* sign up yapımı, Auth.vue ya gidelim, koda baktığımızda emial. ve şifre girince ve kayıt ol a basında onSubmit metodu çalışıyor ve bize email/password bilgisini veriyor, API dokumanına gidelim, sign up with email/password kısmına bir bakalım, burada dediği şey endpoint adresi ile api key ninle beraber email, password ve return secure token bilgisini verirsen kayıt yaparım diyor, şimdi biz bu işlemleri axios ile yapacağız axios u şimdilik buraya import edip işimizi yapalım daha sonra store a götüreceğiz, onSubmitte düzenlememizi yapalım, api key imizi store a koymuştuk oradan alıp buraya yapıştıralım

    axios.post("https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBFzLWgJ-gMByLLwuvwkBVbxcdAkGu9wKg",
        {   email : this.user.email, 
            password : this.user.password,
            returnSecureToken :  true})
                .then(response => {
                    console.log(response)
            })
problemsiz console datayı getirdi, firebase a baktığımızda kullanıcımızda kayıt olmuş durumda, kayıt işlemi bu şekilde

* şimdi zaten üye isem nasıl login olacağım, genel olarak API seviyesinden fark signup da yeni kullanıcıya giderken sign in verify a gidiyor bu adrestende görülebilir, API dokumanında, yani fark sadece url adresi içnde olduğu için farklı yerleri değştirisek başka bir componente vs ihtiyacımız kalmaz, detaylı bir şey yapacak olsaydık ayırmak daha iyi olurdu ancak burada gerek yok, data da isUser : false var, bunun anlamı sayfadaki kullanıcı mı
demek false olunca değil demek yani kullanıcı değil o zaman kaydet yani signup url si olacak ancak isUser : true ise yani sayfadaki kullanıcı ise o zaman sign in yapacak, authLink tanımladık, bu key e kadar olan kısmın url si, eğer isUser = true ise authLink i değiştirecek, aşağıdaki axios daki linkide buna göre düzenleyelim, hem sign in hem sign up tamam ancak bunlar şu anda Auth.vue içinde oysa bunlar store.js içinde olmalıydı,

* login in store üzerinden yapılması, login i Auth.vue içinde methods içinde yaptık, çalışıyor ve çalışır ancak proje büyüdükçe login neredeydi vb. sorularla uğraşırız, bu bundna kaçınmak için bunları store de tutarız, store.js ye gidelim, zaten store da daha önceden login ve logout hazırlamıştık, onSubmit içini kesip store daki login içine koyalım, store a axios u import edelim, methoda baktığımızda burada bir authLink var, this var isUser var, bunlar Auth.vue da olan ve buradaki methodun ihtiyaç duyduğu şeyler, bunlaru Auth.vue dan buraya yollamamız lazım, Auth.vuye gidelim ve onSubmit(){...} içine store.js ye bu bilgileri yollayacak kodu yazalım, dispatch bize actions u hatırlatır, 
    this.$store.dispatch("login", { isUser : this.isUser, user : {}})
diyoruz ki store içindeki login e yan taraftaki bilgileri (isUser vs) yolla, bunları tek tek yazarakta yollayabiliriz veya mapping ile yollayabiliriz mapping çok daha koay old. için bu şekilde yapacağız,
    this.$store.dispatch("login", { ...this.user, isUser : this.isUser })
    },
burada dedik ki, ... spread kullanıp userda ne varsa yolla diyoruz ve yaninda isUser ı da this.isUser olarak yolluyoruz, bu yolladıklarımız, store.js de login içinde parametre olarak authData olarak gelecek yani kullanırken authData yı this.user yerine kullanacağız, koda bak... denemeyi yaptık sıkıntı yok, hem login hemde kaıt da sıkıntı yok, firebase den de bakalım, sıkıntı yok, şu anda kayıt login olmadan da diğer sayfalra gidebiliyoruz, şimdi bu çözelim, 

* token bilgisinin store içinde saklanması, mesela sisteme giriş yapınca bize idToken adında bir veri veriyor, bunu state içinde token da tutmalıyız,  
    commit('setToken', response.data.idToken)
dedik ki login(){} içindeyiz hala, response.data.idToken bilgisini setToken mutation ına uygular, setToken a bakınca da onun işinin state deki token ı set etmek old. görürüz, denemesini yapalım ve dev tools da vue dan state i kontroledelim, ... başarılı, 

* route ları auth guard ile korumak,  eğer token varsa sayfalara yönlendirme yapabileceğiz yoksa ..., bu route lar arasında geçiş yaparken bir kontrol mekanizması... iki tane route umuz var, anasayfa ve hakkında bunlardan herhangibirne tıkladığımızda sote içinde token var mı yok mu diye kontrol edeceğiz varsa yönlendirme çalışacak yoksa çalışmayacak, bu bir getters işlemi, getter ı tanımlayalım, store.js de, 
    getters : {
        isAuthenticated(state){
            return state.token !== ""
        }
    },
eğer state deki token boş değil ise tru dönecek, şimdi biz bu tıklamalar yapıldığından bu getters in çalışmasını ve gelecek cevap true ise yönlendirme olmasını istiyoruz, o zaman router.js e gideceğiz, bu kontrolün anasayfa ve about linklerinden olmasını istyoruz, bu yüzden de onların route larında işlem yapacağız, koda bak, beforeEnter(to, from, next){...} ekliyoruz, girmeden önce (beforeEnter) yapılacak işlemler için kullanılır, şimdi burada store u da import edelim, koda bak, denemeyi yapalım, syfayı refresh şu anda token olmadığı için bizi /auth sayfasına getiriyor/tutuyor, linklere anasayfa/about tıklıyoruz gitmiyor, adres satırına anasayfa/about yazıyoruz gitmiyor, şimdi üyeliğim var deyip email/password girince linklere gidebiliyoruz, başarılı, şimdi şöyle olsun, giriş yaptıüımızda (email/password) bizi anasayfaya göndersin, bunu mesela store a router import ederiz, actions da commit ltına route ekleriz bu şeilde olabilir, veya Auth.vue da onSubmitte .tehn ile dönen response ile birlikte router a "/" push alarız, koda bak, store.js de loginde axios u return ederiz, böylece login deki then çalıştıktan sonra geriye bir promise daha döner onuda Auth.vue da .then ekleyerek kullanabilriz, 
    this.$store.dispatch("login", { ...this.user, isUser : this.isUser })
        .then(response => {
            this.$router.push("/")
        })
    deneyelim, üyeliğim var ile girş yaparız, firebase den token ı alır ve Auth.vue daki login ile actions dan gelen cevap ile sorgular, router da da isAuthenticated ile beforeEnter bakar, cevap true ise burana dönen (return ) ü Auth.vue da yeniden kullanır ve bizi anasayfaya yönlendirir. Şimdi çıkış yap linki var, sürekli orada duruyor, yai sisteme girmemişken de orada bunu çözelim, 

* route lar üzerinde auth a göre değişiklik yapmak, giriş yapmadığımız için token boş olacak, yani isAuthenticated false döndürüyor, Header.vue ya gidelim, orada logoutClass methodu var, çıkış yap ı bu kontrol edecek, d-none : false şu anda yani gizleme diyor, bunu true yapmamız lazım, giriş yapılmadığında yani token yokken, yani isAuthentication : true old. d-none false olacak, ters çalışacak yani, yazalım kodu, 
    'd-none': !this.$store.getters.isAuthenticated
deneme başarılı, 

* logout ekleme, logout çalışıyor mu bir bakalım, Header.vue da logout a alert koyalım, çalışıyor, log out işlemini login deki gibi store.js de yapacağız, logout a clearToken mutations ını yaparsak işlem tamam, çünkü login ve logout işlemleri token ile yürüyor, eğer token boş ise log out oluyor, token dolduğundan log in oluyor, bunu da Header.vue da logouttan çağıralım, 

    logout() {
        // alert("123")
        this.$store.dispatch("logout")
        this.$router.replace("/auth")
      }

burada bir problem var, sayfayı yenilediğimizde token ı boşaltıyor, bunu kazara yapabiliriz, bu durumda bizi auth a atar çünkü token silindi, yada mesela aynı linkten bir tane daha açarsak yine token yenileceği için yine patlarız, çünkü vuex yeniden oluşturuldu, bunu çözelim

* bunu login de çözelim, sayfa yenilendiğinden bu token a yeniden ulaşmalıyım, client side dayız ve herşeyimiz browser üzerinde bunu db üzerinde bir tablo yapıp token bilgisinide orada tutup eğer kişi kendisi logout yapmadıkça token oradan alarak çözebiliriz ancak biz bunu client side de browser üzerinde çözelim, browser üzerinde biz dokunmadıkça bozulmadan kalan key: value şeklinde bir yapı var, application sekmesinde local storage da, local storage a login old. buraya veri atacağız, problemi bu şekilde çözeceğiz, 

* local storage ı dahil edelim, store.js de login e gidip local storage ı ekleyelim, koda bak, 
    .then((response) => {
          console.log(response);
          commit('setToken', response.data.idToken)
          localStorage.setItem("token", response.data.idToken)
        });
local storage a baktığımızda bizim token ı buraya attı, şimdi sayfa yenilendiğinde vuex yeniden aynı tokenla set edilmesi, 

* sayfa yenilendiğinden token değerinin geçerliliğini sağlamak, şimdi sayfayı yenilediğimizde state deki token silindi ancak local storage daki tokena bakalım, orada duruyor, şimdi sayfa yenilendiğinde bir action çalıştıralım actions da, initAuth(){...} bunu da App.vue dan çağıralım, çünkü gün sononda her şey App.vuye dayanacak buradaki konuda diğer compların üzerinde olan bir konu, şimdi App.vue ya gidip created yapalım, yani sayfa üretildiğinden veya yenilendiğinde this.$store.dispatch("initAuth") çalışsın yani, store daki initAuth u dispatch etsin uygulamaya, bunu deneyelim, store.js de initAuth a alert koyalım, bakalım, sayfa yenilendiğinde alert gelecek mi? çalışıyor, şimdi initAuth token değişkeni oluştursun vebunun değeri local storage daki token değeri olsun. 
    let token = localStorage.getItem("token)
yani localStorage dan token key inin value sunu getir, koda bak, denemsyi yapalım, her şey tamam refresh te sayfayı yeniden çalıştırıken ls de token old. için onu alıp state e atıyor, pronşem yok, şimdi çıkış yaptığımızda çıkıyor linkler kapanıyor ve ama çıkış yaptıktan sonrada aslında hala token bilgisi biz silmediğimiz için hala ls de duryor, bunuda çıkış yap ile birlikte silmemiz lazım, logout a 
    localStorage.removeItem("token")
bununla çıkış ile birlikte ls deki token key inin value sunu silmemiz lazım, denemsini yapalım, manuel olarak ls deki token ı silelim, sayfaya ghiriş için üyeliğim var email/password ile girelim ana sayfa geldi, diğer sayfalar çalışıyor, refresh sonrası yine sistemdeyiz hala ls den kontrol edelim, vue devtools dan da kontrol edelim, aynı token bilgisi sayfalar arasında dolaşıyoruz ok, çıkış yapalım, ve tokan bilgisi localden silindi, vue state den de silindi ve bizi auth sayfasına yönlendirdi, sayfayı yeniledik hala aynı auth sayfasındayız çünkü ls de token yok, dolayısıyla state deki tokan da boş, 

*expiresIn nedir, firebase sağlıyor bunu, stroe üzerinde bize firebase den dönen response.data u console a yazıdralım,  gelen veride expiresın : 3600 var,bu saniye; bu bize firebase tarafından veriliyor, 3600saniye = 1 saat burada firebase bize "sana vrdiğim idToken 1 saat sonra geçerliliğini kaybedecek, biz bunu kullanarak sayaç başlatıp buna belli aksiyonlar verebiliriz, 

* otomatik logout yapımı, settTimeout kullanalım, login başarılı old. hemen sonra actions içinde yapacağız, mutations da yapmamaızın sebebi mutations ın görevi stae i set etmek, güncellemek, logout sonrasında bu time out u ayarlayaım, 
    setTimeoutTimer({dispatch},expiresIn){
            setTimeout(()=>{
                dispatch("logout")
            }, expiresIn)
        }
    mantık verilen süre bittiğinde logut çalıştıracak, logout ta state deki token ı silecek ve ls deki token ı silecek ama sayfa yönlendirmesi Header.vue daydı onu oradan keselaim, store.js deki logout içine koyalım, yeri önemli koda bak, daha sonra bizim login içinde timer ı çalıştırmamız lazım, 
        dispatch("setTimeoutTimer", +response.data.expiresIn)
    başına + koyduk ki bu veriyi integer e çevirsin, şimdi deneyelim3.6saniye sonra logout edecek mi? Başarılı.

    * mesela girdikten sonra sayfayı yenilersek ne olacak bu timer açısından, 