vue routing - vue-router

* npm install --save vue-router ile paketi yüklemeliyiz, 

* main.js de vue router ı import etmeliyiz, daha sonra bunu proje genelinde kullanamak için daha öncede kullnaadığımız gibi 
    Vue.use(VueRouter);
yapmalıyız, artık route yönlendirmelerimizi yapabiliriz

* rute tanımlamak için bir [{}, {}, {}] kullanırız, bunları main.js de de yapabiliriz ancak daha düzgün olması için routes.js adında bir dosya oluşturalım ve burada tutalım, 

* bu dosyadan export const routes = [{}, {}, {}] çıkacak, buradaki object lerin belli özellikleri olmalı, { path : '', component : Home }
bunun dediği hangi path (yol) gelirse hangi component çalışacak, boş bir yol gelirse Home component i çalışacak, bu arada bunun geçerli olmalı için önce Home comp un buraya import edilmesi gerekli,  

    export const routes = [
    { path : '', component : Home},
    { path : '/user', component : User}
]
bu routes.js i kullanabilmek için ayrıca bunun main.js e tanımlamamız lazım, şu anda main.js dosyamız;
    import Vue from 'vue'
import App from './App.vue'
import VueRouter from 'vue-router';
import { routes } from './routes'

Vue.use(VueRouter);

const router = new VueRouter({
  routes : routes
  //es6 da routes şeklinde tek yazarakda kullanabiliriz bunun anlamı routes : routes dir
  //bunu projemizde kullanabilmek için instance ımız içinde yani new Vue içinde de belirlememiz lazım
});

new Vue({
  el: '#app',
  router,
  //burada da aynı şey tek router , aynı şekilde router : router demek
  render: h => h(App)
})

bu şekilde, şu anda route çalışıyor ancak neden home gelmedi, bunun sebebi App.vue yani ana comp da home un nerede nasıl görüneceğini belirlemedik, App.vue şu anda boş duruyor, burada öncedeki gibi componentleri import et kendi elementlerinde kullan components { e ekle gibi şeylerle uğraşmadan} <router-view></router-view> ile içine herhangibir şey yazmadan çalışır hale gelsi, adres satırında bir şey olmadan home.vue geli,yor, /user yazdığımızada ise Userç.vue geliyor. Route yönetimi sorunsuz çalışıyor

* routing modları hash ve history, adres satırındaki # bize bir routing modu verir, adres dsatırında dizilim development ortamında anadomain/#routing mode / yönlenen sayfa
# olmadan da çalışabiliriz bunun için main.js de düzenleme yapmamaız lazım, açıklama main.js de

* router linkler ile comp arası gezinme, şimdiye kadar route lar arasında geçiş için / kullandık, gerçek hayatta bu şekilde olmaz şimdi gerçekte nasıl oluyor ona...
bunun için user folder içinde bir Header.vue oluşturalım, ve daha sonra bunu App.vue içinde router-view in üstünde kullanalım, bunun için tabiki önce import sonrada components içine tanımlamalıyız, bu tamamlandıktan sonra Header.vue ya geçeceğiz

* Header.vue da bizim korumamız gereken bir yapı var header kısmı hiyerarşi vs. bunu çözmemiz gerekiyor, <router-link></router-link> route lar arasında dolaşmamızı sağlamak vb. başka işlevleri olan bir element, 
aşağıdaki hale getireceğiz
    <ul class="nav nav-pills">
        <router-link 
            to="/"
            tag="li">
            <a>home</a>
        </router-link>
        <router-link
            to="/user"
            tag="li">
            <a>user</a>
        </router-link>

            <!-- <li><a href="">home</a></li>
            <li><a href="">user</a></li> -->
    </ul>

* burada küçük bir durum, nav elementleri üzerinde aktif olod. dair bir ifade yok, yani hangi sayfada old. adrs çubuğu ve/veya sayfadaki home / user ifadelerinden görüyoruz,

*neredeyiz, aktif olan linklere stil verme, elemente active-class="active" ve to sonrası exact dediğimizde to daki bütün path ı alır ve tam o path geldiğinde active olur,

* şu anda uygulamamızda kendi tıklamamızla sayfalara gidebiliyoruz ancak bir çok durumda uygulamada bir şeyler old. sonra sayfalara yönlenme gerekebilir (çok sık);  mesela user da bir buton olsun o buton bizi home a göndersin, 

* butonu yaptık ve @click="navigateToHome" yaptık, methods da da tanımlamasını yaptık, this.$router. ile router a ulaştık, router bir [] olduğu için bunun içine push yapabiliriz, push u 3 farklı şekilde kullanabiliriz, 
    //this.$router.push("/"); //home a gider, başarılı
    //this.$router.push({ path : '/'}); //bu da başarılı
    this.$router.push( { name : 'anasayfa'}); //bu da başarılı

*  route parametreleri; şu ana kadar static route yönetimi yaptık yani mesela diyelim user sayfasına gitmek istiyoruz ama özellikle user/10 a gitmek istiyoruz, routes.js üzerinde parametre tanımlamamız gerekli, mesela user path ini dinamik bir şeyler tanımlanabilir hale getireceğiz, 
    { path : '/user/:id', component : User , name : 'kullanici'}
burada user/10 olduğunda id 10 oluyor, gerekli düzenlemeyi header daki userdada yapacağız to="/user/10" dedik mesela artık user path ı değişti, 10 değilde adres satırına 15 yazsakta user sayfasına gideriz, 

* route parametrelerini okumak, kullanmak, User.vue da user ID: {{ id }} içeren bir p yapalım ve data oluşturalım, içinde id : this.$route.params.id dediğimizde route bilgisine .params.id ise parametrelerinden id yi al demek, 

* route parametrelerine göre component ile etkileşim, mesela headerda 2 tane user ımız var user 1 ve user 2 yaptık şimdi dikkat edersek user ID yi vren p deki ıd değeri user değişmesine rağmen değişmiyor bunun  sebebi User.vue comp u zaten cretae edildi, ve id ye atama yapıldı, bunu düzeltmemiz lazım, işte buna reactivity deniliyor, User.vue ya watch ekliyoruz, watch bir property yi izler bu prop un değeri değiştiğinde bir aksiyon alır, burada data daki id değişmiyor ancak route değişiyor, yani aksiyonu route un değişmesine göre alabiliriz, 
    watch: {
      // "$route"(value, oldValue){
      "$route"(to, from){
        this.id = to.params.id
      }
    },
böylelikle route daki değişiklikleri parametre olarak okuyabilir hale geldik, user Id bilgisi artık değişiyor, component tekrar render edilmeden

*  child routes (nested routes),  bizim burada user folderımız var ve altında UserDetail.vue, UserEdit.vue ve UserStart.vue diye 3 tane daha comp var, burada user 1 e tıklayınca userlar listelensin ve tıklayınca alttaki bilgilerde güncellensin, burada istediğimiz ana bir route var ve bunun altında bana gelen istekler var, işte bu istekleri nasıl yönlendireceğiz, UserStart.vue da değişiklik yaptık, 4 tane user  li ekledik, Header.vue da da user 2 yi kaldıralım ve kalanın path ini düzeltelim, yai path göndermesin, 
şimdide routes.js e gidip, user a ait routes lar bunlar dememiz lazım, şu anda bizim User a ait 4 tane comp umuz var, bunlara ilişkin path lari ayarlarkan ana comp ve children olarak ayırıp tanımlayacağız, daha sonra User.vue ya gidip, user id ve p yi kaldıracağız, bunun yerine router-view koyup, 
şimdi user a tıkladığımızda user list geliyor, adres satırından rastgele bir sayı girdiğimizde (id olarak) user detail geliyor, edit eklediğimizde de userEdit.vue çalışıyor, şimdi User list e tıkladığımızda olsun bunlar, 

* child route a navigation ekleme, bunun için UserStart.vue daki listeyi router-link e çevireceğiz, sonrasında userDateil.vuye gidip,  düzenleme yapalım, p ye user id yi yazdık ve 
    <p>
      kullanıcının id bilgisi : {{ $route.params.id }}
    </p>
ile bu bilgiyi aldık, ancak bu bilgiyi, daha önce watch ile alabiliren burada hiç bir şey yapmadan aldık, nasıl, daha öncekinde aynı sayfa içinde sayfayı yenilemeden ve herhangibir comp yüklemeden bunu almaya çalışıyorduk, burada ise comp tekrar load edildiğinden id zaten değişiyor, bunu o şekilde alabiliyoruz, 

* şimdi detailde bir buton olsun ve o kullanıcıya ait düzenleme sayfası gelsin, bunun için ne yapmamız gerektiği routes.js de var path : 'id/edit' gelmeli şeklinde,  UserDetail.vue ya gidip bir boton koymayacağız buun sebebi bize burada bir route-link lazım, çünkü yönlenme yapacağız, 
    <router-link
      tag="button"
      class="btn btn-primary"
      :to="'/user/' + $route.params.id + '/edit'">
      Kullanıcıyı düzenle
    </router-link>
burada :to ya dikkat bind edilmiş durumda çünkü dinamiklik olacak, 

* link üretmenin daha iyi bir yolu (isimli route lar),  önceki yöntemde dinamik + string bir şekilde link ürettik bunun daha kolayı var, name verme, router.js - children route a name ekleyelim, daha sonra UserDetail.vue ya gelip :to ya
    :to="{ name : 'userEdit', params : { id : $route.params.id}}"
bu yol daha iyi bir yol professional yani

* çoğu zaman web sayfalarına parametre de yollarız, bunu dil afrketmeksizin back end  e ? ile veriler yollayabiliyoruz, mesela ad soyad yollamak için 
?ad=segio&soyad=ramos, enterlasan bizim sayfayı etkilemez çünkü ? parametrey işaret eder, vue da parametre göndermek için, 2 yol var, path e ekleriz bu ?xxx yolunu veya :to da query = {} kullanırız, birde çok veri yolayabileceğimiz için query veii tip {} olmalıdır, 
    :to="{ name : 'userEdit', params : { id : $route.params.id}, query : { name : 'sergio', lastName : 'ramos'}}"
kullanıcıyı düzenle dediğimizde adres satırına bak. ? ile belirlediğimiz veriler geldi, şimdi bunları componentten alalım, yani UserEdit.vue dan oraya gidelim, 
    <p>Soyad : {{ $route.query.lastName }} </p>
şimd verileri params ile alırken watch kullanıyorduk burada bunu yapmadık, biraz önce param ile alırkende watch kullanmadık, bunun sebebi biraz önceki ile aynı, component yeniden yükleniyorsa watch a gerek yok.

* çoklu router view yapısı (named router views), isimlendirilmiş router görünümleri, App.vue da yapacağız, yöneten bu old. iiçn burada yapacağız, app-header ı yoruma aldım, rouer-view i de 3 ane yaptım, 
    <router-view name="header-top"></router-view>
            <router-view></router-view>
            <router-view name="header-bottom"></router-view>

burada name verdik şimdi bunların ayarına routes.js e gideceğiz

* routes.js de öncelikle Home için path i düzenleyeceğiz, gerekli açıklamalar, routes.js de var, bu konu kullanıcı ux i ile alakalı bir konu

* redirect işlemi, mesela route tanımları içinde olmayan bir şey istek gelseydi ne olacak, bunun için redirect olması lazım, bunu routes.js içinden yapabiliriz, 
    { path : "/redirect", redirect : "/user"}

* wildcard ile tüm route ları yakalamak, amaç, hiç bir route umuza uymuyorsa o zaman şunu yapsın gibi, 
    { path : "*", redirect : "/"}
ne gelirse gelsin, home a gidecek

* animasyon eklemek, router-view e, bunun için önceki bölümdeki kodlardan faydalanacağız, route değişimlerinde animasyon eklensin vs. bunun için App.vue da, default router-view transition içina alalım ve name ve modu unu verelim, aşağıda da css konunu koyalım, ayrıca animasyon ve diğer konular birlikte düşünülmesi gerektiğinden bitez önceki named route view konusunda user dayken header ın altta olamsını da default olan yukarıya çekelim

* hast fragment, bizim belirlediğimiz id lere navigasyon yapabiliriz, mesela sayfa altında id si data olan bir element var bunu adrs satırından yollarsak ona scroll yapar buna hash fragment denir, mesela UserEdit.vue da bu scroll u görebilmek için bir div ekleyelim, adres satırında #data dediğimizde sayfa aşağıya data id sine kadar scroll yapar, burada manuel yaptığımız bunu vue da yapalım, UserDetail.vue da yapalım, :to daki bilgileri data içine navigationLink olarak yolladık, ve data da navigationLink e hash ekledik, bu özel bir kelime deneyiş yaptığımızda adres satırına #data geldi ancak scroll yapmadı, scroll u kontrol etmemiz lazım, 

* scroll u kontrol etmek, bunun için main.js deki router da bazı şeyleri kontrol etmeliyiz, bunu yapan scrollBehavior(){} hemen mod un altına giriyruz, 3 tane parametre alır, to, from, savedPosition, savedPosition scroll gittikten sonra bac e basıldığından nereye gideceğini söylüyor, scrollBehavior bir func ve biz bununla x,y cinsinden scroll un nereye olması gerektiğini belirtiyoruz, mesela y : 800 dediğimizde aşağıya gider ama biz burada #data dediğimiz için değil, func. 800 dediğimiz için, bunu 
    scrollBehavior(to, from, savedPosition){
    if(to.hash){
      return {
        selector: to.hash
      }
    }
    // return { x : 0, y : 800 }
  }

şeklinde yaptığımızda artık hash dikkate alınır hale gelir.

* Guard Hook function ları ile route koruma işlemleri, mesela bir kullanıcı kesinlikle kaydetmeden sayfadan çıkmasın, yada üyeliği girmeden üyelere özel sayfasını göremesin, beforeEnter Guard, 

