vue resource yerine axios kullanımı

* örnek sayfamızda iki sayfa var, yazı listesi ve yazı ekleme, 

* axios nedir, vue resource yerine http request işlemleri için kullanılabiliecek 3rd party bir kütüphanedir, bir js kütüphanesidir, herhangibir yerde kullanabiliriz, 

* bunu projeye dahil etmemiz lazım, npm install --save axios, kurulumdan sonra npm run dev ile yeniden başlatalım projeyi, main.js ye gideceğiz ancak import etmemize gerek yok çünkü bu vue içinde olan bir şey değil 3rd old. için

* firebase de bir proje oluşturalım, vuejs-axios-blog adında bir proje oluşturalım sonra database, real time database oluşturacağız, test modunda, herşey tamam ise db miz hazır,

* post request yollamak, NewPost.vue ya gidelim, buraya axios u import edelim,
    import axios from "axios"
sonrasında
onSubmit() {
      axios.post("https://vuejs-axios-blog-78f95.firebaseio.com/posts.json", this.post, this.post.updatedDate = new Date())
        .then(response => {
          console.log(response)
        })
        .catch(e => console.log(e))
      // console.log(this.post);
      // console.log({...this.post, updatedDate : new Date()});
    },

* get request yollamak, bir kayıt daha ekleyelim, Posts.vue ya gidelim ve verileri firebase den çekelim, script i ekleyelim, ve created ile sayfa yenilemdiğinde çalışacak methodumuzu tanımlayalım, bu firebase den verileri çekecek, axios u önce import edelim, 
    created(){
    axios.get("https://vuejs-axios-blog-78f95.firebaseio.com/posts.json")
      .then(response => {
        console.log(response)
      })
      .catch(e => console.log(e))
  }
console da posts.json daki verilerimiz geldi, problem yok

* şimdi response olarak gelen verileri ulaşıp onları kullanalım, şimdi bu response içinde bizim verilermiz data da bunları kendi array imize aktaralım bunun için data da bir array oluşturacağız, postList : [],
şimdi template deki divlerin fazla olanlarını siliyoruz bir tane yeter bize v-for ile postList te döneceğiz ve div oluşturacağız, template deki static kısmlari dinamik hale getirelim, koda bak template deki işi tamamladık, şimdi axios dan gelen leri postList e pushlayalım, 

    data(){
    return {
      postList : []
    }
  },
  created(){
    axios.get("https://vuejs-axios-blog-78f95.firebaseio.com/posts.json")
      .then(response => {
        // console.log(response)
        let data = response.data;
        for(let key in data){
          this.postList.push({...data[key], id : key})
        }

      })
      .catch(e => console.log(e))
  }

* axios un global request ayarlarının yapılması, post, get, put  sonrası url sonrasında eğer gönderilecek bir payload varsa onu yaz, genelde işlemlerin tamamı bu şekilde gidiyor, sonrasında .then().catch() vs. bunların dışında başka özellikleride var axiosun, vueresource da da global ayarlar vardı, burada da var ve ulaşmak kolay, githubdaki axios un sayfasında var, burada da oradaki config defaulttakiler anlatılacak,  

* main.js, önce import, sonra axios.defaults üzerinde ayarlar yapacağız, github dan da bakınca axios.defaults bir nesne ve ayarlarımızı bu nesne için yapacağız. Koda bak. Mesela biz burada firebase deki base url mizi yazabiliriz, bundna sonra bu url yi kullandığımız gerekli yerleri yeniden düzenleyebilirz, NewPost.vue, Posts.vue gibi, onlarıda yapalım, mesela Posts.vue da artık get. için 
  axios.get("/posts.json")
burada ilginç bir durum olarak main.js deki düzenlemeden Post.vue nun nasıl haberi oldu, axios bu işleri proje seviyesinde yapıyor, 
bir kaç tane örnek olarak bir başka şey daha yapalım, mesela bir header ayarlayalım, kodda authorization key belirledik mesela ve kabul edilecek dosya formatlarıo belirledik, console da network ta posts.json a baktığımızda bu ikisininde ayarlandığını görebiliriz, 

* custom instance nasıl oluşturulur?, her zaman sadece bir tane end point e istek atmak durumunda değiliz, mesela şu anda sadece firebase e istek yolluyoruz, mesela istek yollayacağımız başka bir url olsaydı, bu durumda bizim bir custom instance a ihtiyacımız var. src altına custom_axios.js dosyası oluşturalım, axios import sonrası 
  import axios from 'axios'

const instance = axios.create({ 
    baseURL : "https://vuejs-axios-blog-78f95.firebaseio.com",
 })

//  instance.defaults.headers.common["xxxxx"]

export default instance;

burada main.js de axios iin yaptığımız bütün ayarlamaları bu instance içinde yapabiliriz, 
şimdi bunu kullanmak için (dikkat baseURL i aynı url belirledik) Postçvue ya gidip axios importu yoruma çekip instance ı importa alalım, ve kodda customAxios şeklinde kullanalım, deneyelimi yeni post ekleyelim, problem yok.

 
