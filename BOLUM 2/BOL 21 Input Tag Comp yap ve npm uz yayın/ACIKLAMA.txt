Input tag componenti yapma ve bunu npm üzerinde yayınlamak

* App.vue içinde ana şablonu oluştrduk, etiketleri span lar ile yaptık

* etiketlerin array içinde tutulması ve yeni etiket oluşturmak, etiketlerimizi bir array de tutacağız, data da tags:[] hazırladık, template deki spanlardan bir tanesini bıraktık gerisini sildik, o tek kalan span a v-for koyduk, tags dakileri span olarak hazırlayacak, tags:["deneme", "test"] deneme için hazırladık

* şimdi inputa girilen bir veri tag olarak eklensin, inputa bir şey yazdık enter a bastığımızda tags [] ine inputa yazdığımızı eklesin,
    @keydown.enter="tags.push($event.target.value)"
bu inline yolu ancak burada sıkıntı tag ı ekliyor ancak inputu boşaltmak için ikinci bir satır lazım, o da burada olmaz bu yüzden method ile çözelim, addTag
    addTag(event){
      this.tags.push(event.target.value);
      event.target.value = "";
    }

* etiket eklerken verilerin kontrol edilmesi ve hata mesajlarının yönetilmesi, şimdi yapacağımız şey mesela test var diyelim array de yeniden test girdiğimizde bizi uyarsın, daha önce girildi gibisinden, veya hiç bir şey yazmadan enter ladık yine tag ekliyor bunu da engellememiz lazım, bnu bir if ile event.target.value.length > 0 ile çözeriz, hata mesajı için bir error sınıflı bir div oluştururuz, ayrıca data ya error : false koyarız, ve template de v-if="error" deriz, böylelikle default durumda .error claslı div görünmez error değeri true old. bu div görünür, error değerinide addTag func. içinden değiştireceğiz, koda dikkat

* şimdi diyelim inputtayız sonuna kadar sildik inputu devam edersek etiketleride silsin sondan sırayla, aynı zamanda çarpıya bastığımızda da silsin, inputta bir şey girerken enter a bkıyorduk, bu sefer backspace e bakacağız, 
     @keydown.backspace="removeTag"
removeTag(){ this.tags.splice(this.tags.length -1, 1)}
dedik ki tags arrayinin son elemanından itibaren bir tane elemanı sil, son eleman dahil, yani sondaki elemanı sil, yukarıdaki kod backspace e basıldığından direk inputtaki elemanlardan başlamaz direk arraydeki son elanı siler, bizim istediğimiz ise önce inputta bir veri varsa onu silsin yoksa arraydeki silmeye geçsin, 
    removeTag(e){
      if(e.target.value <= 0){
        this.tags.splice(this.tags.length - 1, 1)
      }
    }
şimdi sıra x e basıldığında silsin, bunun için removeOneTag(){} oluşturacağız, çünkü üsttekinde silmede en sondakini siliyor, oysa şimdi bizim istediğimiz hangi tag ın x ini tıkladığımız bilgisi lazım bize, burada bizim v-for da iki tane parametre yapmalıyız, ikinci parametre index olmalı, çünkü bize lazım olan bilgi şu anda index, 
    removeOneTag(index){
      this.tags.splice(index, 1)
    }

* artık componentlere ayırma zamanı, src altında Tags.vue ve Tag.vue oluşturacağız, şimdi App.vue dan .tag olanları yani tag olan kısmı alalım,  bununla ilgili style ları alalım, Tags.vue yu oluştuyralım benzer şekilde data yı Tags.vue içinde kulandığımız için onu Tags.vue ya taşıyoruz, methods da problem yaşayacağız, addtag ve removeTag Tags.vue da olmalı, removeOneTag da aynı şekilde, bu nktada comp arası iletişim devreye grecek, mesela bizim array Tags.vue da ancak arraydeki bilgiler <Tag></Tag> comp unda kullanılıyor yani buradan Tag.vue ya göndermemeiz lazım, aynı şekilde close da tag.vue da orada close a basınca remove func çalıacak ama o da tags.vue da, 

* tags.vue daki <Tag></Tag> v-for ile dönecek, tabi bu tag ayrı bir comp old.için Tag.vue ve içine {{ tag }} bilgisini alması gerektiği için bu bilgide Tags.vue içindeki tags:[...]  içinde old. için burada props kullanacağız, şimdilik removeOneTag içeren span ı yoruma alıp sade span ile dememizi yapalım, App.vue da artık data ve methods lara htiyacımız yok, ama bunlar Tags.vue ya taşıdığımız için bunu import ve components yapmamız lazım,  
    components : {
    appTags : Tags
  }
template içine de <app-tags></app-tags> eşklinde kullanıma alalım, denemeyi yapalım, promlem yok,

* şimdi sırada x e basınca o tag ı silmesi, diğerlerinn çalışmasında sıkıntı olmamazının sebebi onlar hep input içinden dönüyor, yani tags.vue içinde oysa tag üzerinde dönmesi gereken method removeOneTag($event); Tags.vue ya gidelim,  ve tag ın içine 
    @removeOnetagEvent="removeOneTag" ekleyelim, yani bu tag ın içine removeOneTagEvent gelirse bu methodu çalıştıracak, tabi buraya gelen de bir veri olacak removeOneTag(event) içinde parametre olarak kullanılacak olan bunun adıda $event dir. tag dan gelecek, şimdi Tag.vue ya gidelim ve buraya fırlatılacak kodu yazalım, 
    Tag.vue da .close spanına gidip
        @click="$emit('removeOneTagEvent', index)"
    burada diyoruz ki; buraya tıklandığında removeOneTagEvent adında bir veri emitle ve bu veri içinde index bilgisi olsun,
    Tags.vue da ki tag elementinde de 
        @removeOneTagEvent="removeOneTag($event)"
    ifadesiyle diyoruz ki; 
    buraya removeOneTagEvent adıyla bir veri gelirse onu ve içindeki veriyi removeOneTag adında methodun parametresi olarak kullan.

* v-model ile kullanım, istediğimiz şey bir db ye bağlanıp oradan mesela bir cümle yada ifade alıp onu virgüllerinden ayırıp ayrı etiketler yapmak, şimdi app-tags a v-model="tags" dediğimizde ve dataya tags = "deneme, test" yazdığımızda aslında olacak şey Tags.vue ya bir inputöuş gibi "deneme, test" i gönderiyor, bizim istediğimiz şeyde bunları alıp virgülden ayırıp her birini tag yapması, şimdi buun çalışabilmesi için App.vue dan tags.vue ya yolladığımız tags in Tags.vue dan alınması lazım, bu ise props ile olacak, tags a gidip props ekleyelim, bu props u nesne olarak ekleyeceğiz ve aı value olacak çünkü zaten v-model ile verileri yollarken bunlar value olarak gider, ve bunu required : false dedik çünkü veri gelmeyedebilir buradan gelmezse hata vermesin, şimdi veri geldiğinden bunu Tags.vue daki tags : [...] e eklemeli, bunun için life cycles olan created kullnacağız, koda bak...  tabi bunlardan önce Tags.vue da data daki tags : [...] ın için boşaltmamız lazım, deneme ve her şey ok 

* şimdi sırada @input ile verileri v-model e gönderme, şimdi burada mesela tags array ını bir akrana basalım,  {{ tags }} gelecek cevap tags : [...] olacak ancak bu aşamada inputtan yeni bir şey yazdığımızda bu ekrana gelecek ama array e eklenmeyecek, bu çözmek için inputtanda v-model e göndreme yapabilmeliyiz,mesela şu anda ekranda App.vue dan aldığı ve burada Tags a bastığı array var, deneme, test, ankara şeklinde, biz buna inputtan istanbul eklediğimizde istanbul ekrana geliyor ancak array a eklenmiyor, 

* bunu tag ekleyen methodun içinden yapabiliriz, yollardan biri bu, Tags.vue da addtag(){...} a gidip array a push ladığımız yerde push lanan ifadeyi join lersek olur, 
    this.$emit("input", this.tags.join(","));
diyoruz ki input a emit yap virgül ile beraber,
diğer yol ise watch ile, biz ne yapıyoruz array imizin değişip değişmediğine bakıyoruz, yani array güncelleniyor, addTag, removeTag, removeOneTag bunların hepsinde arrade işlem var ve güncelleniyor, bu durumda array i izlesek ve değişme oldugunda , ile değişmeyi birşleştirsek, sonuçta değişme dedğimiz şeyde input içinde oluyor, 
     watch : {
      tags(){
          this.$emit("input", this.tags.join(","))
      }
  }
watch atında dediğimiz şey tags im değiştiğinde aşağıdaki kodu çalıştır, yani inpuuatkini al ve , ile birlikte tags ile birleştir

*  tags leri arttıralım mesela, tags2 array yapalım ve yeni elemenete koyalım, koda bak

* tema seçimi, uyg. teknik olarak çalışıyor, tag lara biz color adında bir attribute yollayacağız ve orada yazana göre style değişecek,  color:"success"  yazdık bunu Tags.vue ya göndereceğiz, çünkü tag ile ilgili style işlemleri orada, Tags.vue ya gidip düzenlemeyi yapalım, şimdi App.vue dan bize gelecek verinin key i(adı) color, bunu props a ekleyelim
  color : {
        type : String,
        required : false,
        default : "primary"
      }
  burada dedik ki bize gelecek şeyin tipi string olacak, ama illada bir veri gelecek değil, gelmeyedebilir, yani required değil gelecek olan şey, eğer gelmezse o zaman color u primary kullan, template içine
    :tagColor="color" ekledik, yani tag componentine tagCoor olarak color u al dedik, şimdi Tag.vue ya gidip tagColor u props olarak al diyeceğiz, Tag.vue daki props ;
       props : ["tag", "index", "tagColor"]
    
    buradaki çalışma şu, App.vue da color a success dediğimizde o cuccess önce ATgs.vue ya gelecek, oradanda Atg.vue ya gelecek, elimizde success var, bununla style tanımlaması yapacağız, şimdi bizim burada bir background-color değerimiz var bunu değiştireceğiz, burada bir kaç tane için kouşl yazabilirdik ancak daha güzeli var, data içinde selectedTheme isimli bir property tanımlayalım,  ve template de .tag e :class="selectedTheme" yapalım, yani class ımız selectedTheme den gelsin, daha sonra created kullanalım, koda bak, tabi bu arada .tag daki renkleri yoruma lamyı unutmamak lazım, 

    * uygulama problemsiz çalışıyor, 

