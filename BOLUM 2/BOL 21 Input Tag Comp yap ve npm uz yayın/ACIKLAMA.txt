Input tag componenti yapma ve bunu npm üzerinde yayınlamak

* App.vue içinde ana şablonu oluştrduk, etiketleri span lar ile yaptık

* etiketlerin array içinde tutulması ve yeni etiket oluşturmak, etiketlerimizi bir array de tutacağız, data da tags:[] hazırladık, template deki spanlardan bir tanesini bıraktık gerisini sildik, o tek kalan span a v-for koyduk, tags dakileri span olarak hazırlayacak, tags:["deneme", "test"] deneme için hazırladık

* şimdi inputa girilen bir veri tag olarak eklensin, inputa bir şey yazdık enter a bastığımızda tags [] ine inputa yazdığımızı eklesin,
    @keydown.enter="tags.push($event.target.value)"
bu inline yolu ancak burada sıkıntı tag ı ekliyor ancak inputu boşaltmak için ikinci bir satır lazım, o da burada olmaz bu yüzden method ile çözelim, addTag
    addTag(event){
      this.tags.push(event.target.value);
      event.target.value = "";
    }

* etiket eklerken verilerin kontrol edilmesi ve hata mesajlarının yönetilmesi, şimdi yapacağımız şey mesela test var diyelim array de yeniden test girdiğimizde bizi uyarsın, daha önce girildi gibisinden, veya hiç bir şey yazmadan enter ladık yine tag ekliyor bunu da engellememiz lazım, bnu bir if ile event.target.value.length > 0 ile çözeriz, hata mesajı için bir error sınıflı bir div oluştururuz, ayrıca data ya error : false koyarız, ve template de v-if="error" deriz, böylelikle default durumda .error claslı div görünmez error değeri true old. bu div görünür, error değerinide addTag func. içinden değiştireceğiz, koda dikkat

* şimdi diyelim inputtayız sonuna kadar sildik inputu devam edersek etiketleride silsin sondan sırayla, aynı zamanda çarpıya bastığımızda da silsin, inputta bir şey girerken enter a bkıyorduk, bu sefer backspace e bakacağız, 
     @keydown.backspace="removeTag"
removeTag(){ this.tags.splice(this.tags.length -1, 1)}
dedik ki tags arrayinin son elemanından itibaren bir tane elemanı sil, son eleman dahil, yani sondaki elemanı sil, yukarıdaki kod backspace e basıldığından direk inputtaki elemanlardan başlamaz direk arraydeki son elanı siler, bizim istediğimiz ise önce inputta bir veri varsa onu silsin yoksa arraydeki silmeye geçsin, 
    removeTag(e){
      if(e.target.value <= 0){
        this.tags.splice(this.tags.length - 1, 1)
      }
    }
şimdi sıra x e basıldığında silsin, bunun için removeOneTag(){} oluşturacağız, çünkü üsttekinde silmede en sondakini siliyor, oysa şimdi bizim istediğimiz hangi tag ın x ini tıkladığımız bilgisi lazım bize, burada bizim v-for da iki tane parametre yapmalıyız, ikinci parametre index olmalı, çünkü bize lazım olan bilgi şu anda index, 
    removeOneTag(index){
      this.tags.splice(index, 1)
    }

* artık componentlere ayırma zamanı, src altında Tags.vue ve Tag.vue oluşturacağız, şimdi App.vue dan .tag olanları yani tag olan kısmı alalım,  bununla ilgili style ları alalım, Tags.vue yu oluştuyralım benzer şekilde data yı Tags.vue içinde kulandığımız için onu Tags.vue ya taşıyoruz, methods da problem yaşayacağız, addtag ve removeTag Tags.vue da olmalı, removeOneTag da aynı şekilde, bu nktada comp arası iletişim devreye grecek, mesela bizim array Tags.vue da ancak arraydeki bilgiler <Tag></Tag> comp unda kullanılıyor yani buradan Tag.vue ya göndermemeiz lazım, aynı şekilde close da tag.vue da orada close a basınca remove func çalıacak ama o da tags.vue da, 

* tags.vue daki <Tag></Tag> v-for ile dönecek, tabi bu tag ayrı bir comp old.için Tag.vue ve içine {{ tag }} bilgisini alması gerektiği için bu bilgide Tags.vue içindeki tags:[...]  içinde old. için burada props kullanacağız, şimdilik removeOneTag içeren span ı yoruma alıp sade span ile dememizi yapalım, App.vue da artık data ve methods lara htiyacımız yok, ama bunlar Tags.vue ya taşıdığımız için bunu import ve components yapmamız lazım,  
    components : {
    appTags : Tags
  }
template içine de <app-tags></app-tags> eşklinde kullanıma alalım, denemeyi yapalım, promlem yok,

* şimdi sırada x e basınca o tag ı silmesi, diğerlerinn çalışmasında sıkıntı olmamazının sebebi onlar hep input içinden dönüyor, yani tags.vue içinde oysa tag üzerinde dönmesi gereken method removeOneTag($event); Tags.vue ya gidelim,  ve tag ın içine 
    @removeOnetagEvent="removeOneTag" ekleyelim, yani bu tag ın içine removeOneTagEvent gelirse bu methodu çalıştıracak, tabi buraya gelen de bir veri olacak removeOneTag(event) içinde parametre olarak kullanılacak olan bunun adıda $event dir. tag dan gelecek, şimdi Tag.vue ya gidelim ve buraya fırlatılacak kodu yazalım, 
    Tag.vue da .close spanına gidip
        @click="$emit('removeOneTagEvent', index)"
    burada diyoruz ki; buraya tıklandığında removeOneTagEvent adında bir veri emitle ve bu veri içinde index bilgisi olsun,
    Tags.vue da ki tag elementinde de 
        @removeOneTagEvent="removeOneTag($event)"
    ifadesiyle diyoruz ki; 
    buraya removeOneTagEvent adıyla bir veri gelirse onu ve içindeki veriyi removeOneTag adında methodun parametresi olarak kullan.

* v-model ile kullanım, 