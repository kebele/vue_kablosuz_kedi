genel tekrar projesi

* ürün işlemleri, ürün girişi, çıkışı, alış satış tutarları bakiye vs. firebase üzerinde tutatacağız, firebase restApi kullanacağız

* App.vue yu temizledik, temiz bir sayfa hazırladık, src>components>products + shared klasörlerini hazırladık, shared>Header.vue + Footer.vue hazırladık, Products>ProductList.vue + ProductSell.vue + ProductPurchase.vue hazırladık,

* index.html ye bootstrap ı koyalım ve Header.vue ve Footer.vue ile başlayalım, template deki header ve footer alanlarını kopyalayıp bunlara koyduk, ProductPurchase.vue ya da container ı koyduk, şimdi App.vue ya importları yapalım ve sayfayı basalım, template deki sayfalardaki container ları vue dosyalarımıza taşıdık ve App.vue da değişiklikler ile denemelerini yaptık

* vue router projeye ekleyelim, npm install vue-router --save ile projeye ekledik, npm run dev diyerek uyg yeniden çalıştırdık, ve src> router.js oluşturduk ve vue-router ı import ettik, 
    import VueRouter from 'vue-router'
routes = [] oluşturyoruz, içinde yollarımız olacak, her bir route/yol/url için ayrı nesneler olacak, 
burada hangi istek gelirse hangi path ve/veya hangi component çalışacak, mesela
    { path : "/", component : ProductList }
anasayfa isteği gelirse ProductList çalışacak, ProductSell, ProductPurchase içinde path leri hazırladık, * (ne gelirse gelsin bunların dışında "/" ana sayfaya redirect te yaptık), önceden main js de kullandığımız bazı durumları buradan hazırladık, new VueRouter ve Vue.use(VueRouter gibi), şimdi main.js e gidip bunu import edelim, ve new Vue içine router i ekledik, artık App.vue da denememizi yapalım, app-container ımızı vardı bunun yerine router-view kullanacağız, denemelerde sıkıntısız çalışıyor, path leri adres çubuğundna yazdık, çalışıyor, 

* router-link navigasyon ayarları, yani nav daki tıklamalarla sayfalara gitmesi, Header.vue ya gidip router-link ler le hazırlamaya başlayalım, link ler aşağıdaki şekilde oluşturulacak
    <router-link
                active-class="active" 
                to="/urun-islemleri"
                tag="li"
                class="nav-item">
                    <a class="nav-link">Ürün İşlemleri</a>
            </router-link>

*vuex eklenmesi ve product modulu hazırlanması, npm install vuex --save sonrası npm run dev ile yeniden çalıştır, vuex yapılandıralım, ürülere ilişkin bir çok işlem olacak, ürün girişi, çıkışı, firebase üzrinden getirilmesi,  alış, satış tutarları, bakiye kısımları, bunlar comp larla ilgili değil, merkezi bir yerde toplanmalı, 

* src>store>modules>product.js yaptık, içinde bir state sabiti (const) bir nesne oluşturuyoruz, sonra bir getters nesnesi, sonra mutations ve actions nesnelerini oluşturduk, ve bunların hepsini export etmliyiz ki başka yerlerden kullanabilelim, şimdi state içinde neleri tutacağımızı belirleyelim, products : [] ürün listesiiçindeki şeyler burada duracak, burada bunları db dende alabilirdik ama perf ve maliyetle karşılaşırdık, getters içinde getProducts(state){} olsun ürünleri getiremizi sağlasın, burada state içimnden ürün getireceğimiz için state bunun parametresi olacak ve return state.products dönecek bu liste ile ilgili olan yani bütün ürünlerle ilgili birde bize tek bir ürün için getter lazım, getProduct(state){} bunuda hazırlayalım, sırada mutations var, burada mutataions burada sadece update, yani products : [] ı güncellemek, 
    updateProductList(state, product){
        state.products.push(product);
    }
actions, mutations ın gürevi state i güncellemek (set işlemleri) sync çalışır anında yani, actions ise mutation a async özelliği eklenmiş hali, mesela actions ile dış servise bağlanıyoruz dönen cevaba göre mutation çalışıyor, o da state i güncelliyor, bizim burada uyg. dışa bağımlı old. için bolca actions lazım, koda bak 

* store> store.js hazırladık, bütün modülleri store içinde tanımlıyoruz, sonrada gidip bu store u main.js e ekliyoruz, import ve new Vue ya

* alış, satış ve bakiye için store un düzenlenmesi, store.js de state in içine purchase, sale, balance bilgilerini hazırladık ve hepsini 0.0 verdik, birde modules imiz vardı, şimdi getters, mutations falan buraya tanımlarsak burası şişer o yüzden bunların hepsini eğitimde ayrı js lerde toplamıştık, onları hazırlayalım, 

* store>getters.js , actions.js ve mutations.js oluştuaracğız, getters.js ile başlayalım, bize getter olarak lazım olan şey state de belirlediğimiz 3 tane değeri bize geri döndürecek bir func lazım, parametre olarak state i almalı ki içine girebilsin ve bize döndürdüğü bir nesne olsun ki 3 state i de ayrı ayrı görebilelim, kodu hazırladık, sırada mutations.js var, burada da bir func oluşturuyoruz state i update etmesi için state, payload parametreleri olacak state belli payload ise update edeceği değerler, yani payload u dışarıdan alacak, yani dışarıdan gelen payload ile state deki purchase, sale ve balance update edeceğiz

* actions.js, biz burada state imizdeki purchase ve sale i firebase e göndreceğiz ve oradan alacağız bunun için gerekli olan func. tanımlayalım 
setTradeResult({state}) =>{...}
firebase e gönderecek
getTradeResult = ({}) => {...}
firebase den getirecek

* artık bunları store.js den çağıralım, import ile yapacağız
    import * as getters from './getters'
bunun anlamı getters içindekileri getters ismi ile bir object olarak getir, 
    ve bunu store a ekleyeceğiz, 
aynı şeyleri mutations ve actions içinde yapacağız, böylece uygulama içindeki verilerinde storedaki tanımlarını yaptık, 

* firebase de uygulama oluşturmak,
console.firebase.com dan proje oluşturyoruz, projemize eklemek için geekli kodları kopyalıyoruz, projemizde firebase den sadece db yi kullanacağız, onda da real-time db yi kullanacağız, oluştur deyip test modunda başlayacağız, sebebi kilitliyi seçersek authenticaton falan uğraşmamaız lazım, 

* birde firebase de kullanacağımız firebase restApi kullanacağız, 
https://firebase.google.com/docs/reference/rest/database, bunu kullanacğız, artık projede kullanabilmemiz için firebase tarafoındaki yapılanduırma tamam bunu projemizde kullanabilmemiz için vue-resource u projemize eklememiz lazım, 
npm install vue-resource --save
yükleme sonrası npm run dev ile projeyi yeniden başlatalım, şimdi main.js de vue resource u import yapacağız ve 
Vue.use(VueResource)
diyeceğiz, 

* ürünün firebase üzerine kayıt edilmesi, urun islmeleri sayfasında ürünün adı, adet, fiyat açıklama vs girdikten sonra kaydet dediğimizde firebase e kaydedecek, brada önemli bir şey eğer eksiklik varsa kaydet pasif kalacak, bir başkası kaydete basınca bir loading geliyor ekrana, ayrıca alt taraftaki tutarlar bakiye vs de güncelleniyor. 

* temelle başlayalım, temelde ürün işlemlerinde yapılan iş, ürünün adı, adedi, fiyatı ve açıklamasını alıp firebase e kaydedecek, ihtiyacımız olan dosyalar, 
    store > modules > produt.js --> getters, setters, mutations, actions burada, 
    components > products > ProductPurchase.vue --> ürün işlemleri burada
bunları açıp işlemlere başlayacağız,  