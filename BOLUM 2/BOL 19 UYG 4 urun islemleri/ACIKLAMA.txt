genel tekrar projesi

* ürün işlemleri, ürün girişi, çıkışı, alış satış tutarları bakiye vs. firebase üzerinde tutatacağız, firebase restApi kullanacağız

* App.vue yu temizledik, temiz bir sayfa hazırladık, src>components>products + shared klasörlerini hazırladık, shared>Header.vue + Footer.vue hazırladık, Products>ProductList.vue + ProductSell.vue + ProductPurchase.vue hazırladık,

* index.html ye bootstrap ı koyalım ve Header.vue ve Footer.vue ile başlayalım, template deki header ve footer alanlarını kopyalayıp bunlara koyduk, ProductPurchase.vue ya da container ı koyduk, şimdi App.vue ya importları yapalım ve sayfayı basalım, template deki sayfalardaki container ları vue dosyalarımıza taşıdık ve App.vue da değişiklikler ile denemelerini yaptık

* vue router projeye ekleyelim, npm install vue-router --save ile projeye ekledik, npm run dev diyerek uyg yeniden çalıştırdık, ve src> router.js oluşturduk ve vue-router ı import ettik, 
    import VueRouter from 'vue-router'
routes = [] oluşturyoruz, içinde yollarımız olacak, her bir route/yol/url için ayrı nesneler olacak, 
burada hangi istek gelirse hangi path ve/veya hangi component çalışacak, mesela
    { path : "/", component : ProductList }
anasayfa isteği gelirse ProductList çalışacak, ProductSell, ProductPurchase içinde path leri hazırladık, * (ne gelirse gelsin bunların dışında "/" ana sayfaya redirect te yaptık), önceden main js de kullandığımız bazı durumları buradan hazırladık, new VueRouter ve Vue.use(VueRouter gibi), şimdi main.js e gidip bunu import edelim, ve new Vue içine router i ekledik, artık App.vue da denememizi yapalım, app-container ımızı vardı bunun yerine router-view kullanacağız, denemelerde sıkıntısız çalışıyor, path leri adres çubuğundna yazdık, çalışıyor, 

* router-link navigasyon ayarları, yani nav daki tıklamalarla sayfalara gitmesi, Header.vue ya gidip router-link ler le hazırlamaya başlayalım, link ler aşağıdaki şekilde oluşturulacak
    <router-link
                active-class="active" 
                to="/urun-islemleri"
                tag="li"
                class="nav-item">
                    <a class="nav-link">Ürün İşlemleri</a>
            </router-link>

*vuex eklenmesi ve product modulu hazırlanması, npm install vuex --save sonrası npm run dev ile yeniden çalıştır, vuex yapılandıralım, ürülere ilişkin bir çok işlem olacak, ürün girişi, çıkışı, firebase üzrinden getirilmesi,  alış, satış tutarları, bakiye kısımları, bunlar comp larla ilgili değil, merkezi bir yerde toplanmalı, 

* src>store>modules>product.js yaptık, içinde bir state sabiti (const) bir nesne oluşturuyoruz, sonra bir getters nesnesi, sonra mutations ve actions nesnelerini oluşturduk, ve bunların hepsini export etmliyiz ki başka yerlerden kullanabilelim, şimdi state içinde neleri tutacağımızı belirleyelim, products : [] ürün listesiiçindeki şeyler burada duracak, burada bunları db dende alabilirdik ama perf ve maliyetle karşılaşırdık, getters içinde getProducts(state){} olsun ürünleri getiremizi sağlasın, burada state içimnden ürün getireceğimiz için state bunun parametresi olacak ve return state.products dönecek bu liste ile ilgili olan yani bütün ürünlerle ilgili birde bize tek bir ürün için getter lazım, getProduct(state){} bunuda hazırlayalım, sırada mutations var, burada mutataions burada sadece update, yani products : [] ı güncellemek, 
    updateProductList(state, product){
        state.products.push(product);
    }
actions, mutations ın gürevi state i güncellemek (set işlemleri) sync çalışır anında yani, actions ise mutation a async özelliği eklenmiş hali, mesela actions ile dış servise bağlanıyoruz dönen cevaba göre mutation çalışıyor, o da state i güncelliyor, bizim burada uyg. dışa bağımlı old. için bolca actions lazım, koda bak 

* store> store.js hazırladık, bütün modülleri store içinde tanımlıyoruz, sonrada gidip bu store u main.js e ekliyoruz, import ve new Vue ya

* alış, satış ve bakiye için store un düzenlenmesi, store.js de state in içine purchase, sale, balance bilgilerini hazırladık ve hepsini 0.0 verdik, birde modules imiz vardı, şimdi getters, mutations falan buraya tanımlarsak burası şişer o yüzden bunların hepsini eğitimde ayrı js lerde toplamıştık, onları hazırlayalım, 

* store>getters.js , actions.js ve mutations.js oluştuaracğız, getters.js ile başlayalım, bize getter olarak lazım olan şey state de belirlediğimiz 3 tane değeri bize geri döndürecek bir func lazım, parametre olarak state i almalı ki içine girebilsin ve bize döndürdüğü bir nesne olsun ki 3 state i de ayrı ayrı görebilelim, kodu hazırladık, sırada mutations.js var, burada da bir func oluşturuyoruz state i update etmesi için state, payload parametreleri olacak state belli payload ise update edeceği değerler, yani payload u dışarıdan alacak, yani dışarıdan gelen payload ile state deki purchase, sale ve balance update edeceğiz

* actions.js, biz burada state imizdeki purchase ve sale i firebase e göndreceğiz ve oradan alacağız bunun için gerekli olan func. tanımlayalım 
setTradeResult({state}) =>{...}
firebase e gönderecek
getTradeResult = ({}) => {...}
firebase den getirecek

* artık bunları store.js den çağıralım, import ile yapacağız
    import * as getters from './getters'
bunun anlamı getters içindekileri getters ismi ile bir object olarak getir, 
    ve bunu store a ekleyeceğiz, 
aynı şeyleri mutations ve actions içinde yapacağız, böylece uygulama içindeki verilerinde storedaki tanımlarını yaptık, 

* firebase de uygulama oluşturmak,
console.firebase.com dan proje oluşturyoruz, projemize eklemek için geekli kodları kopyalıyoruz, projemizde firebase den sadece db yi kullanacağız, onda da real-time db yi kullanacağız, oluştur deyip test modunda başlayacağız, sebebi kilitliyi seçersek authenticaton falan uğraşmamaız lazım, 

* birde firebase de kullanacağımız firebase restApi kullanacağız, 
https://firebase.google.com/docs/reference/rest/database, bunu kullanacğız, artık projede kullanabilmemiz için firebase tarafoındaki yapılanduırma tamam bunu projemizde kullanabilmemiz için vue-resource u projemize eklememiz lazım, 
npm install vue-resource --save
yükleme sonrası npm run dev ile projeyi yeniden başlatalım, şimdi main.js de vue resource u import yapacağız ve 
Vue.use(VueResource)
diyeceğiz, 

* ürünün firebase üzerine kayıt edilmesi, urun islmeleri sayfasında ürünün adı, adet, fiyat açıklama vs girdikten sonra kaydet dediğimizde firebase e kaydedecek, brada önemli bir şey eğer eksiklik varsa kaydet pasif kalacak, bir başkası kaydete basınca bir loading geliyor ekrana, ayrıca alt taraftaki tutarlar bakiye vs de güncelleniyor. 

* temelle başlayalım, temelde ürün işlemlerinde yapılan iş, ürünün adı, adedi, fiyatı ve açıklamasını alıp firebase e kaydedecek, ihtiyacımız olan dosyalar, 
    store > modules > produt.js --> getters, setters, mutations, actions burada, 
    components > products > ProductPurchase.vue --> ürün işlemleri burada
bunları açıp işlemlere başlayacağız,  ProductPurchase.vue da script e kodları yazalım, yapacağımız iey inputtaki verileri almak, data(){ return { ... }} içine product{...} tanımlayacağız sonuçta bu inputların her biri product ile alakalı, 
    product : {
                title : "",
                count :  null, 
                price : null, 
                description : ""
            }
    şimdi v-model ile bunları template de ilgili elementlere bağlayalım,  v-model="product.title, bir konuda fiyat ve adet in tipi number yapalım, 

* şimdi kaydet butonu, burada buton firebase e bağlanacak ve inputtan gelen verileri firebase e kaydedecek yani ortada async bir işlem var, db dışarıda old. için, bu durumda bunun düzenlemesini actions da yapacağız, product.js e gideceğiz, prduct.js e önce vue yu import edelim, import sonrası actions içindeki saveProduct(){...} ı düzenleyeceğiz,
    Vue.http.post("", product)
    bununla http ye ulaşıp bir post işlemi yapacağız, ilk parametre url adresi ikincisi ise bu url ye göndereceğimiz şey, burada payload object ini göndereceğiz, url yi firebase in bize verdiği kodlardan alacağız, url ye /products.json ekliyoruz, firebase json olarak tutuyor dosyaları, firebase den bize bir cevap gelecek .then() ile ...
        Vue.http.post("https://urun-islemleri-59b86.firebaseio.com/products.json", product)
            .then((response) => {
                console.log(response)
            })
    bunu denememiz için bizim bir payload yollamamız lazım, ProductPurchase.vue ya gidip, bu payload a gelecek olan product nesnemizi yolayalım, butonu bir saveProduct diye func. tanımlayalım, 
    this.$store.dispatch("saveProduct", this.product) $ store ile store a yolluyoruyz, dispatch ise bizim yapacağımız işlem actions old. için saveProduct ı çalıştır dedik, peki buraya veri gönderememiz lazım buda this.product, yani data oluşturduğumuz product nesnesi, denemsini yapalım, sayfayı doluralım ve kaydete basalım, console gelen bilgilier ok, firebase e bakalım, product isimli nesneyi oluşturmuş, içinede bilgilieri yazmış, işlem başarılı, 

* bu işlemi actionMapp ile de yapabilirdik ancak bu şekilde yaptık, sebebi her kayıt sonrası loading çıkması istiyoruz, onun için bize ayrı ayı lazım, bu fuciton un çalışması, şimdi ürün listesinin güncellenmesi var, firebase e ürün yolladık, şimdi ürün listesi listeyi firebase den çekecek, mutations içinde updateProductList(){} var, bunun yaptığı şey eklenen ürünü products = [] a push luyor, firebase den veri aldığımızda bize id/name i kendisi veriyor,  response.body.name içinde, o key i de alıp product içine koyabiliriz, saveProduct içinde onuda save leyelim, 

saveProduct({ commit, state }, product){
        // vue resource işlemleri ...
        Vue.http.post("https://urun-islemleri-59b86.firebaseio.com/products.json", product)
            .then((response) => {
                product.key = response.body.name
                commit("updateProductList", product)
                // console.log(response)
                console.log(state.products)
            })
    },
denemyi yaptığımızda ürün ekledikçe products ı güncelliyor, ve yeni eklediklerimizi pushuyor, key lerde de sıkıntı yok, firebase dende kontrol ok, 

* alt taraftaki alış, satış balance ı yapalım, store.js de vue, vuex, getirdik, modules den product ı getirdik, ürüne ilişkin işlemler, state, getters, mutations, actions burada, ve buradan state, getters, mutations, actions export ediyoruz,  ayrıuca store..js de 
    Vue.use(Vuex)
diyoruz, yani vuex kullanacağım, burada da bir state var, içinde purchase, sale, balance var, getters, mutations, actions, modules >  product  bunları da export ediyoruz, 
şimdi bizim bu 3 değeri set etmemiz lazım, set deyince akla mutations gelir, mutations.js e gidelim, updateTradeResult(){} var burada, ayrıca bizim asıl kaydedecğimiz yer firebase o zamanda actions akla gelir actions.js ye bakalım,  orada da setTradeResult (){} var, önce mutations da setTradeResult işlemi yapalım, daha sonra da http yardımı ile actions olarak firebase i güncelleyelim, product.js ye gidelim,  saveProduct a dispatch tanımlayalım ve .then içine dispatch koyalım, dispatch actions u akla getirir, dispatch e setTradeResult ı dispatch edecek firebase e, şimdi neyi dispatch edecek, tradeResult ı tradeResult adında bir nesne tanımlayacağız, içinde purchase, sale ve count tutacak, count product.count dan gelecek, purchase ve sale ise işlemin satış yada alış old. belirlemekte kullnaılacak, şimdi actions. da setTradeResult a gideceğiz, burada bizim payload olarak tradeResult a ihtiyacımız var, burada önce store daki state imizi (purchase, sale, balance) ı güncelleyeceğiz, bunu mutations.js deki updateTradeResult ile, parametre olarak commit ekleyeceğiz, commit mutations u akla getiri zaten, 
    commit("updateTradeResult", tradeResult)
yani burada dediğimiz updateTradeResult a tradeResult ı commit le, böylelikle mutations a gönderdik şimdi mutatins a gideceğiz, 
state deki purchase ı state.sale i burada update edeceğiz += e dikkat, burada state.purchase, state.sale ve state.balance ı hazırladık, actions a geri dönüp artık firebase kısmını yapacağız, bunun için Vue.http.put() kullanacağız, bundna önce ise vue importunu yapacağız, burada put kullanamaıızım sebebi put bir kayıt ekler sonrakinden o eklediğinin üzerine yazar, post ise sürekli yeni kayıt ekler, üzerine yazmaz, buradaki dosyamızın adı ise trade-result olsun, nereye kaydedeceğiz hazır peki neyi kaydedecek ? , tradeData bunun için tradeData nesnesi tanımlayacağız içinde de state.purchase ve state.sale olacak, şimdi önce product.js deki dispatch çalışacak sonra mutations sonrada actions çalışacak, actions da ilgili kısımları
    let tradeData = {
        purchase : state.purchase,
        sale : state.sale
    }
    Vue.http.put("https://urun-islemleri-59b86.firebaseio.com/trade-result.json", )
        .then((response) => {
            console.log(response)
        })
lattarata 34xx falan yazıyor sonra yapacapız, 
* xxxxx

* footer üzerindeki verilerin güncellenmesi, bunu footer.vue içinde göstereceğiz, getters.js de bu bilgileri getTradeResult içinde bu bilgiler var, bunun görevi verileri getirmek, getters ları computed ile gösterebiliyoruz, computed ın görevi değişince ekrana basmak, 
    Footer.vue da vuex importu sonrası
    computed : mapGetters(["getTradeResult"])
daha sonra template içinde {{ getTradeResult.purchase }} gibisinden verilieri alıp ilgili elemente basarız

* sayfayı yenilediğimizde firebase den alış satışı alsın, bu işlemde async old. için actions, içine gidelim, getTradeResult var, Vue.http.get("https://urun-islemleri-59b86.firebaseio.com/trade-result.json") ikinci parametre yok, çünkü zaten bulunan bir veriyi getiremek istiyoruz, 
    export const getTradeResult = ({ commit }) => {
    // firebase bağlanacak ve oradaki verileri alıp state i güncelleyeceğiz, state i güncelleyen şey mutations, o zaman şu anda actions dayız mutations ı buradan çağırmalıyız, bunun için bu func. commit i parametre olarak alacağız
    Vue.http.get("https://urun-islemleri-59b86.firebaseio.com/trade-result.json")
        .then((response) => {
            console.log(response)
        })
}

biz bu getTradeResult ı nerede kullanmalıyız, uyg App.vue da çalışıyor, o zaman bu comp create old. bu aksiyon çalışsın, life cycle lardan create kullanacağız, yani bu App.vue create edildiğinden çalışacak, this.$store.dispatch('getTradeResult) yani sayfa create edildi, store a git oradaki getTradeResult ı dispatch le dispatch old. için actions a gidecek orada getTradeResult u çalışıracak, veriyi çektik, bu veri ile store u güncelleyeceğiz, güncelleme mutations çğrıştırır, o zaman mutations.js e gideceğiz, biz buna purchase, sale vecount u gönderdiğimizde burası set eder ama count u firebase de tutmuyoruz,o zaman mutations ı biraz modifiye edeceğiz, eğer payload da bir count varsa countlu ifadelerini kullan yoksa cont ile çarpılmamış ifadeleri kullan, burası tamam actions a geri döneceğiz, getTradeResult dan commit ile mutations daki updateTradeResult ı çağıralım ve buna  response.body yi yollayalım, 

* tutar ve bakiyenin filter ile daha güzel görünmesi, bu para formatında görünsün, filter ı footer.vue içindede tanımlayabiiriz, o comp ta kullanırız veya global olarak main.js de tanımlayabiliriz, global yapalım, filter bir func. içine value yollayacağız o bize istediğimiz şekilde bu value yu gözterecek, kullanımı {{ purchase | currencey }} şeklinde, Footer.vue ya gidelim ve template deki ilgili yerlerde kullanalım, 

* kaydet butonunun verilere göre aktif/pasif olması, productPurchase.vue dya gidelim, buradaki butona disabled isimli attr eklersek disabled olur, burada bir kontrol yapacağız input alanalrından bir tansei bile boşsa disabled olmalı, burada bir reactivity var yani değişen bir veri ile bir şeyler değişecek, bunu computed ile yapıyoruz, (watch da var ancak bu işe için computed daha ideal) saveEnabled(){} tanımlayacağız, template de button a disabled ekleyip bunu bind edelim saveEnabled a, saveEnabled true return ederse o zaman sayfa disabled olacak, 
    computed : {
        saveEnabled(){
            if(this.product.title.length > 0 && 
            this.product.count > 0 &&
            this.product.price > 0 && 
            this.product.description.length > 0){
                return false
            } else {
                return true
            }
        }
    }

* beforeRouteLeave, ayrılmadan önce kaydedilmemiş veri kontrolü, mesela ürün işlemlerinde kaydete basmadan başka bir sayfaya gitmek istedik, alert ile "kaydedilmemiş şeyler var yindee çıkayım mı" diye sorması, life cycle hook una benzer    beforeRouteLeave(){....} burada next() sayfadan çıkmaya izin verir, next(false) isin vermez, koda bak, 

* ürün işlemlerinde ürün ekledikten sonra bizi ürün listesine yönlendirsin, ondna önce loading bar çıkacaktı, loading daha sonra şimdi yönlendirmeyi yapalım, kaydetme işlemi product.js de yapılıyor, saveProduct(){...} da dispatch den sonra, router ı import edeceğiz, burada vue router ı import etmeyeceğiz, router.js i import edeceğiz, genel olarak ürün ekleme işlemi SaveProduct içinde oluyor, buda product.js içinde (ürün işlemleri burada çünkü) bunun sebebi route işlemlerinizi template içinde yapmıyoruz, derslerde öyle yapmıştık, path vs template içinde halletmiştik, oysa burada routes ları ayrı bir js içinde (router.js) yaptık, bu yüzden bunu buraya import edeceğiz, path ler orada çünkü, router.js de router i export etmiştik, açıklama bu şekilde şimdi saveProduct(){...} a dönersek burada router.replace("/") kullanacağız, dedik ki burada dispatch sonrası ana sayfaya git, yani router ı "/" ana sayfa olarak değiştir, denemsini yapalım, ürün ekledik kaydet dedik, beforeRouteLeave geldi, kaydedilmemiş... diyor??? ok dedik ve ürün listesine (anasayfaya) gittik, ana sayfaya gidiş tamama ama beforeRouteLeave neden geldi ?

* kaydetme işleminde beforeRouteLeave i güncellemek, burada olan şey kaydet gerçekleşti, yani kaydet e bastım, daha sonra sayfa değiştirecek (product.js de saveProduct(){...}) ... bizim burada butona basılıp basılmadığını kontrol etmemiz lazım, data içine saveButtonClicked : false koyduk, saveProduct(){...} içine this.saveButtonClicked = true yapacağız, arkasından saveEnabled daki şartlara buton şartı da getireceğiz, bunlar ProductPurchased.vue da, bunun için beforeRouteLeave(){} e ekstra şart getirdik, yani herhangibiri dolmaışsa ve butona basılmamışsa uyarı verecek yoksa sayfa değişecek, denemeyi yapalım, herşey ok,

* router geçişlerine animasyon eklemek, biz bu sayfaların değişmesini App.vue da <router-view></router-view> ile yapıyoruz, buna animasyon kazandırmak için <transition></transition> içine alacağız, name ="fade" mode = "out-in" daha sonra style e gidip gerekli class ları ekleyeceğiz, 
    .fade-enter{}
  .fade-enter-active{}
  .fade-leave{}
  .fade-leave-active{}
yapacağımız işlem ekrana girişte opacity 0 olacak ilerledikçe 1 e doğru gelecek vs. 
.fade-leave{} bir şey vermiyoruz çünkü bu ekrandan ayrılma animasyonunun ilk karesi burada zaten opacity 1 olacağı için gerek yok, .fade-leave-active e aynı transition olacak burada opacity 0 olacak buna dikkat, yani biterken, 

* loading eklenmesi, önce loading css ini index.html ye ekliyoruz,  şimdi bunu nasıl kullanacağız, bu loading bir div içinde bunun belli durumlarda (sayfa değişimi) çağrılması gerekiyor, bunu App.vue içinde tanımlayabiliriz, bu durumda bir state gibi düşünüp ona göre durum değiştirmemiz gerekecek, bunu productPurchase.vue içinde tanımlayalım, .container içinde en tepeye koyalım, deneme ok, sürekli loading div i çalışıyor şu anda, bizim istediğimiz ise kaydete bastığımızda loading çıksın, yönlendirme işe zaten gidecek, yani loading sadece kaydet e bağlı olacak, bunu :style="isLoading" ile yapalım, bunu computed un içine koyacağız, çünkü computed bir şeylerin değişip değişmediğine göre hereket ediyor, yani reactivite var burada, buarad bu computed i style için tanımladık, 

* ürün listesinin dinamik güncellenmesi, ürün işlemleri, yani ürün eklenmesi kısmı tamam, artık sıra ürün listesi kısmında, products.js de getters var bu bizim state imizdeki products arrayını getiriyor, şimdi ProductList.vue ya gidip kodları yazalım, öncelikle vuex deki helper lardan faydalanacağız, mapGetters kullanacğız sebebi ise bize lazım olan func. getters içinde, buda computed lar ile kullanılır, 
    import { mapGetters } from 'vuex';

    computed : {
        ...mapGetters(["getProducts"])
    }
burada yaptığımız şey vuexden mapGetters kullanacağız dedik, computed de kullanacağız, computed in ne işe yaradığı belli sayfada reaktif bir şey olacaksa bunu commputed ile yaparız, ...mapGetters(["getProducts]) 
burada ise product.js içindeki (bu önemli değil nerede old. belirtmedik çünkü vuex içinden ulaşılabilir durumda ) product.js içindeki getters nesnesi içindeki getProducts methodunu burada kullan demek, şimdi template e çıkıp, tablodaki tr yi hazırlayalım, 
    <tr v-for="product in getProducts" :key="product.id"> şeklinde getProducts içindekileri tr ye basacak, getProducts bizim state imideki products ı getirir, denemeyi yaptık ancak ürün listesini getirmedi, sebebi product.js deki state deki products [] i boş, burada yapılması gereken firebase den listeyi alması ve sayfa yenilendiğinde vs. bu listeyi güncellmesi, şimdi bunu bir deneyelim, firebase den güncellemiyor ama yeni bir ürün eklediğimizde bizi ürün listesine yönlendiriyor, orada bakalım ürün vra mı, bu zaman bir şey ekledi ancak ş anda template de egrekli ayarlamaları yapmadığımız i,çin şablonda ne yazılıysa onu bastı, bunları ayarlayalım, {product.key}} vs yaptık problemsiz aldık bilgileri, bir deneme daha yapaılm, sıkıntısız veriler geliyor ancak gelen veriler firebase den değil ve sayfa yenilediğimizde veriler kayboluyor, sebebi, firebase işlemlerini yapmadık, 

    * ürün listesini firebase den dinamik olarak çekmek, buna benzer bir çöümü actions.js altında getTradeResult(){} olarak yapmıştık, product.js ye gidelim, orada actions altında initApp({commit}){...} içinde yapacağız, bunun actions da olmasının sebebi bu dış dünya ile iletişime geçecek yani bir async üşlem var bu yüzden actions, 
    Vue.http.get("url").then((response)=>{ console.log(reponse)})
    url den verileri getir demek, deneme için hazır olmamız için bir adım kaldı, App.vue da created içinde initApp ı çağıralım, deneme ok her şey burada body içinde var şu ana kadar yaptığımız bütün denemeler vs firebase e ne göderdiysek,   
initApp şu durumda;
    initApp({commit }){
        //  vue resource işlemleri... 
        Vue.http.get("https://urun-islemleri-59b86.firebaseio.com/products.json")
            .then((response) => {
                // console.log(response)
                let data = response.body;
                for(let key in data){
                    data[key].key = key;
                    commit("updateProductList", data[key])
                }
            })
    },
bir diğer yapacağımız, ProductList.vue da, table a v-if ve v-else ekledik, koda bak,

* adet, fiyat görünüm düzenlemeleri, template de product.price a | currency ekledim, fiyat formatında görünsün, adet kısmı renkli görünsün bunu bootstrap ile mesela bg-danger text-white ile yapabiliriz veya bunu dinamik yapmak istersek :class="getCountClasses(product.count)" class ı bind ederek yapabiliriz, bunuda computed, wtach veya method ile yapabiliriz, computed yapmak istedik diyelim, bu durumda mesela count a göre bg vereceğiz, o zaman product.count u computed e göndermemiz lazım ki şartba bakabilelim, ancak computed a parametre gönderemeyiz, o zaman method içide yapalım, 
    methods: {
        getCountClasses(count){
            return {
                'btn-danger text-white' : count == 0 || count == null , 
                'btn-success text-white' : count > 0,
            }
        }
    },

* ürün çıkışı, ürün çıkışında ürün listesinin görünmesi, ilk yapacağımız ürünleri listeletmek, sonra seçilen ürüne ait bilgileri getirmek, son olarak adet kaydet loading ... ProductSell.vue option lara v-for ile ürünleri bastırmak, ilk olarak mapGetters importu yapalım daha sonra computed içine bunu koyalım, computed içine ...mapGetters([getProducts]) yaptık, artık template içinde sanki bir property gibi bu array i kullanabiliriz, koda bakalım, :value koyduk ebebi bizim unique olan bir değere ihtiyacımız var seçim için,
şimdiselect e v-model="selectedProduct"  yapıyoruz, datayı oluşturup içine koyuyoruz, şimdi bizim seçtiğimiz ürünün bilgilerini getirmemiz lazım, bunuda product.js içinde getProduct(state){...} ile hazırlamıştık, yani yapacağımız şey key i yollayıp o keyin ait olduğu produt ı almak

* ürün ön izlemesinin getirilmesi, select e @change="productSelected" koyuyoruz, böylelikle select değiştiğinde bu method çalışacak, methods da metodu hazılayalım, seçtiğimizde console.log(this.selectedProduct) çalışsın, deneyelim, problem yok, seçtiğimiz ürünün key ii getiriyor, şimdi burada getter ı çalıştıralım, productSelected da this.$store.getters.getProduct() getter a parametre yolluyoruz, şimdi product.js ye g,d,p getProduct ı düzenleyelim, burada elimizdeki key e göre bütün productları dolaşacak keyleri karşılaştıracağız, eşleşme old. bunu return edeceğiz